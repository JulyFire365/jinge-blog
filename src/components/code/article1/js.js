import React from 'react';
import Content from 'compDir/article/content/js';
import styles from 'compDir/article/css.css';

class ArticleDetail extends React.Component {
    render() {
        return (
   			<Content showNum={this.props.showNum} theId="1" title="前端学习建议" changeFn={this.props.changeFn.bind(this)}>
					<div className={styles.content}>
					 	<p>有许多小伙伴都曾问过我该如何学习前端的问题，借此机会简单说下自己的想法。</p>
					 	<p>首先还是动机问题，是否真的想学习前端，还是临时的一个念头。学习是仅作了解，增加一些知识面，还是想真正从事前端相关的工作。</p>
					 	<p>这里就先忽略动机不纯的同学了，比如只是随口说着玩，或者只想简单了解下。其实前端开发，说简单也简单，说复杂，也可以相当复杂。说简单，其实掌握好基本的css及js（准确说是jquery）应用技巧就基本可以开始开发了。当然，根据目前前端更细的分工，也许你只需要熟练掌握css或者js中的一种，也是可以的。不过如果真的想向前端这块发展，这两种知识的储备还是缺一不可的。前端开发，表现（css）与行为（js），始终还是密不可分的一个整体。你可以有侧重点，但是这两者基本的知识还是需要储备的。</p>
					 	<p>好了，废话大家也挺烦了。总之，想深入前端行业，跟其他行业一样，都是要付出一定的时间与精力的，都一样。首先还是谈谈前端的入门问题。个人建议首先要能熟练应用css及jquery。所谓的熟练应用，就是平时能够看到的网页，不管是布局，还是js效果，自己都能七七八八完成（少部分比较复杂效果除外，很多复杂功能的开发，一般也会借助其他框架）。</p>
					 	<p>之所以建议先掌握jquery，一来是有些公司的确在js方面就要求会这个就行。另外一方面原因是这个学习成本相对不高，最初如果就采用原生javascript来做，可能会比较抓狂（目前也很少公司会真的要求全部就用原生javascript来做开发的）。当然，原生javascript也是需要熟练掌握的，要不然可能稍复杂的逻辑处理，紧紧使用jquery，就会显得无能为力了。</p>
					 	<p>jquery部分的学习，建议把<a href="http://www.w3school.com.cn/jquery/" target="_blank">w3cschool</a>上面的例子大概熟悉下，然后结合实际多练习联系。然后就是关于原生javascript的学习了，这个相对会比较枯燥，但是掌握好了，对前端技术就是一个质的提升了。建议熟读百遍《javascript高级编程第3版》，同样需要边看边练习。学习编程，实践才是王道，看再多也不一定有多大用。当然，可能有同学会说现在好多都在用ES6+了，还有必要看ES5么。个人觉得基础还是都一样的，掌握好基础的了，再去学习派生的知识，会比较容易理解。如果书籍看得比较费劲，强烈建议看看《妙味课堂》的视频讲解，讲解得很到位，浅显易懂。指示可能要花钱购买，可以直接淘宝搜索——妙味课堂即可。</p>
					 	<p>这里说个题外话，关于传说中的ajax知识。目前前端的复杂，基本就是源自这个家伙。以前的前端只管展示就够了，现在由于ajax的大量巧妙应用，前端的同学也要处理后端的数据了。有数据，就有通讯，有逻辑处理。所以前端的工作一下子有了本质的区别。虽然知识点还是那么两个知识点，但是工作内容一下子增了几个量级。以前做好页面展示，可能再加点焦点图，表单简单验证的效果，就可以完事把模板扔给后端的同事了。现在做好展示知识基础，要花费大量的时间在数据渲染，及相关的逻辑处理了。</p>
					 	<p>好了，假如上面说的内容，你已经应用得游刃有余了。那恭喜你，这只是个基础而已。可能还有极少公司要求上述知识就ok了，但目前绝大部分公司早就不满足上述开发了。模块化，项目构建，MVV*的开发模式，各种层出不穷的框架，等等一大波僵尸正在等着你。</p>
					 	<p>如果看到这里，你还没有取消学习的念头，那说明，你服用药物的计量应该加倍了。接着上面说的，由于前端开发的复杂化。如何有效达到协同开发，如果降低项目开发的复杂度，如何降低出错率等等问题有待解决。所以有了上述所说的内容。首先是模块化开发，这个主要是一种开发思路，达到大家共同开发，在方便互相能有效复用的同时，又可以避免共同开发带来的干扰（比如js开发中全局变量的冲突）。这部分相对学习起来倒不费劲，有现成的库可以方便使用，比如seajs及requirejs。使用方法大同小异，API也不是太多，建议可以选择seajs，按照官方的例子稍加练习即可。</p>
					 	<p>接下来就是所谓的项目构建了。所谓的项目构建，主要解决的一些程序发布前的自动化预处理工作。比如js，css文件的压缩及合并，或者对js及css相关文件的编译（如ES6+、css3自动添加兼容前缀，sass、less的编译），或者对文件路径（比如cdn部署的文件路径替换，关于解决缓存的文件添加版本号的问题）的处理，及自动监听文件变化刷新浏览器等。可以看到，这部分可以实现很多自动化处理，避免人工重复劳作，对于提高开发效率比较重要。</p>
					 	<p>目前常用的构建工具，大概有gulp，grunt，fis3，webpack等。前端构建工具，基本都是基于nodejs安装。所以需要对nodejs的安装，及基本操作有一些了解（比如安装卸载所需package文件等）。上述grunt应该比价原始了，可以忽略。每个构建工具都有其特点。比如gulp，配置文件比较简单易读，设置不同的task，可以比较方便的时间文件的压缩。但是对于文件的合并及路径替换方面，似乎就不那么方便了。fis3，比较系统的一个构建工具，但关于项目的目录配置等方面，可能就需要根据构建工具来合理考虑。而webpack，相对配置略显复杂，可以比较方便解决文件依赖，编译（如sass，ES6，base64等)及压缩合并的工作，基本上是react开发的配套之选。其对于多页应用的开发，配置比较繁琐。</p>
					 	<p>关于构建工具，建议可以熟练其中一种即可，如gulp。其他可根据实际情况了解。学习的时候可以按照官方的例子练习，不清的地方多上网搜索了解。</p>
					 	<p>接着就是框架的选择了。目前比较流行的开发思路有MVV*阵营及组件化开发阵营，两者有可能重复。如MVVM的angularjs，曾经红极一时，如今的reactjs组件化开发，似有一统天下之势。MVV*强调层次分明，渲染层、数据、控制层，各司其职，协同开发。个人感觉这种开发思路有其可取之处（如对于不同部分代码的合理分离管理），但并非完全适合前端开发。如angularjs的指令写法，难免有些像做后端渲染了（个人观点，比喜勿喷）。另外就是所谓的组件化开发思路。目的是达到类似搭积木的效果。理想状况是造好一批需要的组件，然后通过相应重复、组合，达到高效利用的开发目的。如react中强行组合js及html（JSX）的做法，加之利用构建工具（如标配webpack），达到在js中引入css的目的。从而黏合模板，数据与逻辑，达到一个个独立模块的做法。</p>
					 	<p>个人一直觉得前端应该往组件化开发的方向发展，这样可以达到从局部到整体的开发，对于后续的优化也比较有利。只是react也的应用也需根据实际情况选择。要发挥react的效果，可能需要其相关的一条技术链（react只强调渲染层）。这样对于最终文件的大小的考虑，关于对与组件的有效拆分及管理，也是需要根据实际开发花费一定时间规划及调整的。</p>
					 	<p>目前的vuejs发展趋势似乎也相当不错，小巧的同时实现组件化开发。建议对这部分内容感兴趣的同学可以从这个入手尝试了解。</p>
					 	<p>最后，目前时间02：22，好困了啊。前端开发的日趋复杂，是困难也是机遇，前端在编程之路上能有一席之地也来之不易，小伙伴们加油。最终，不管考虑选择哪种框架，多了解了解各种框架的解决方案，对于自己管理代码及形成更加完善的编码思维，都是有好处的，大家有时间可以多了解了解。</p>
					 	<p>祝福想放弃的小伙伴的明智之选，为坚定前端的小伙伴的惊人勇气而鼓掌。</p>
					 	
					</div>
					<p className={styles.time}><span>摘自jingeQQ空间</span><span>At 2016-10-15 00:32</span></p>
    		</Content>
        );
    }
}

export default ArticleDetail;

